#!/bin/bash
if [[ "$EUID" -ne 0 ]]; then
	echo "Sorry, you need to run this as root"
	exit
fi

clear

while [[ -z $domain ]]; do
    echo "Which domain name do you want for your site?
Specify just the domain name without www or http://
Example: myblog.com"
    read -p "Domain: " domain
done

while [[ -z $wp_user ]]; do
    echo
    echo "Specify a name for the WordPress administrative user
Example: admin"
    read -p "Admin user name: " wp_user
done

while [[ -z $wp_password ]]; do
    echo
    echo "Specify a password for the WordPress administrative user"
    read -p "Admin user password: " wp_password
done

while [[ -z $wp_email ]]; do
    echo
    echo "Specify an email address for the WordPress administrative user
Example: admin@example.com"
    read -p "Email address: " wp_email
done

while [[ -z $wp_version ]]; do
    echo
    echo "Specify your desired WordPress version to install
Examples: latest, nightly, 4.0, 5.3.2"
    read -p "WordPress version: " wp_version
done

if [[ -z $wp_locale ]]; then
    echo
    echo "Specify a locale for the WordPress installation"
    echo "Or leave blank for en_US"
    read -p "Locale: " wp_locale
    if [[ -z "$wp_locale" ]]; then
        wp_locale="en_US"
    fi
fi


mysql_db=$(head /dev/urandom | tr -dc a-z | head -c 6)
mysql_dbprefix=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5)
mysql_user=$(head /dev/urandom | tr -dc a-z | head -c 6)
mysql_pass=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16)

database_create() {
    local DB_NAME
    local DB_USERNAME
    local DB_PASSWORD
    DB_NAME="$1"
    DB_USERNAME="$2"
    DB_PASSWORD="$3"
    
  echo "Creating ${DB_NAME} and granting priveleges"
  # 
  mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};"
  mysql -e "CREATE USER '${DB_USERNAME}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';" || true
  # set password if user existed already
  mysql -e "SET PASSWORD FOR '${DB_USERNAME}'@'localhost' = PASSWORD('${DB_PASSWORD}');"
  mysql -e "GRANT ALL PRIVILEGES on ${DB_NAME}.* TO '${DB_USERNAME}'@'localhost';"
  mysql -e "FLUSH PRIVILEGES;"
}

create_file(){
    if [ ! -f ${1} ]; then
        touch ${1}
    fi
}
create_folder(){
    if [ ! -d "${1}" ]; then
        mkdir -p ${1}
    fi
}

set_wp_htaccess_ols(){
    local DOCHM
    DOCHM="$1"
    HTACC="${DOCHM}/.htaccess"
    
    create_file "${HTACC}"
    cat >> "${HTACC}" <<-EOL
 	# BEGIN WordPress
    <IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteRule ^index\.php$ - [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule . /index.php [L]
    </IfModule>
    # END WordPress
	EOL
}


function check_cur_webserver() {
    if [ -e /usr/local/lsws/bin/lshttpd ] ; then
	    if /usr/local/lsws/bin/lshttpd -v | grep -q Open ; then
		    # LiteSpeed/x.x.x Open
        	# echo 'You have OpenLiteSpeed installed...'
        	webserver_type='ols'
    	elif /usr/local/lsws/bin/lshttpd -v | grep -q Enterprise ; then
		    # LiteSpeed/x.x.x Enterprise
       		# echo 'You have LiteSpeed Enterprise installed...'
       		webserver_type='ols-enterprise'
    	fi
    else
        # echo 'You have Nginx installed...'
        webserver_type='nginx'
    fi
}

function create_linux_user() {
    local user
    local group
    local homedir
    local logs_directory
    user=$1
    group=$2
    homedir=$3
    logs_directory="${homedir}/logs"
    mkdir -p "${homedir}"
    mkdir -p "${logs_directory}"
    useradd -d "${homedir}" -g "${group}" -M -s "/bin/bash" "${user}"
    chown -R "${user}":"${group}" "${homedir}"
    chmod -R g+w "${homedir}"
    chmod -R g+s "${homedir}"
}


if id -u "$user_name" &>/dev/null; then
	echo "User name collision. Aborting..."
	exit
fi

database_create "${mysql_db}" "${mysql_user}" "${mysql_pass}"

check_cur_webserver

user_name=$(echo $domain | cut -c1-32)

home_directory="/var/www/$domain/html"


create_linux_user "${user_name}" www-data "${home_directory}"

# Add Vhost config based on webserver_type
if [ "$webserver_type" = "nginx" ]; then
    echo "[$domain]
user = $user_name
group = www-data
listen = /run/php/php-fpm-$domain.sock
listen.owner = $user_name
listen.group = www-data
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
php_admin_value[open_basedir] = \"/var/www/$domain/html/:/tmp/\"
php_admin_value[allow_url_fopen] = 0
php_admin_value[allow_url_include] = 0
php_admin_value[disable_functions] =  dl, exec, fpassthru, getmypid, getmyuid, highlight_file, link, opcache_get_configuration, passthru, pcntl_exec, pcntl_get_last_error, pcntl_setpriority, pcntl_strerror, pcntl_wifcontinued, phpinfo, popen, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix_getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, proc_close, proc_get_status, proc_nice, proc_open, proc_terminate, shell_exec, show_source, source, system, virtual
php_admin_value[session.use_strict_mode] = 1
php_admin_value[session.cookie_httponly] = 1
php_admin_value[session.use_cookies] = 1
php_admin_value[session.use_only_cookies] = 1
php_admin_value[session.use_trans_sid] = 0" > /etc/php/7.4/fpm/pool.d/$domain.conf

    systemctl restart php7.4-fpm

    # it's very important to escape the variables and quotes within the echo
    echo "include /etc/nginx/common/6g.conf;
include /etc/nginx/common/7g[.]conf;
include /etc/nginx/userconfigs/http/*.conf;		# user custom configuration

server {

    include /etc/nginx/common/deny[.]conf;
    include /etc/nginx/userconfigs/server/*.conf;	# user custom configuration
    
    listen 80;
    listen [::]:80;

    root /var/www/$domain/html;
    index index.php index.html index.htm;

    server_name $domain www.$domain;

    client_max_body_size 25M;

    # Needed for page-level caching when cache-enabler plugin is installed
    include /etc/nginx/common/cache_enabler.conf;
	
    # Compress certain files with gzip.
    include /etc/nginx/common/gzip[.]conf;
	
    # Cache certain filetypes in the browser
    include /etc/nginx/common/browsercache[.]conf;

    # Prepare for phpmyadmin when it's installed
    location ~ /phpMyAdmin/.*\.php$ {
        allow all;
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php-fpm-$domain.sock;
    }

    # Handler for PHP files
    location ~ \.php$ {
        # Restrict wp-login to 10 requests per period
        location ~ \wp-login.php$ {
            limit_req zone=WPLOGIN;
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/run/php/php-fpm-$domain.sock;
        }
		
        fastcgi_param PHP_VALUE \"
        \";
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php-fpm-$domain.sock;
        fastcgi_buffers 16 32k;
        fastcgi_buffer_size 64k;
        fastcgi_busy_buffers_size 64k;		
    }

    location / {
        try_files \$cache_enabler_uri \$cache_enabler_uri2 @cachemiss; 
    }

    location @cachemiss {
        try_files \$uri \$uri/ \$custom_subdir/index.php?\$args; 
    }
	
    # Security Headers	
    add_header X-Frame-Options \"SAMEORIGIN\" always;
    add_header X-XSS-Protection \"1; mode=block\" always;
    add_header X-Content-Type-Options \"nosniff\" always;
    add_header Referrer-Policy \"no-referrer, strict-origin-when-cross-origin\" always;
    add_header X-Download-Options \"noopen\";
    add_header Strict-Transport-Security \"max-age=30000000; includeSubDomains; preload\" always;
	
    # OSCP Settings
    ssl_stapling on;
    ssl_stapling_verify on;
	
    # include user custom configurations
    include /etc/nginx/userconfigs/site/$domain-*.conf;
}" > /etc/nginx/sites-enabled/$domain
    
elif [ "$webserver_type" = "ols" ]  || [ "$webserver_type" = "ols-enterprise" ]; then
    /bin/bash <( curl -sk https://raw.githubusercontent.com/meramsey/blaqpanel/main/scripts/vhsetup.sh ) -d "$domain"
    set_wp_htaccess_ols "${home_directory}"
    systemctl restart lsws
fi


cd ${home_directory}
su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins core download --version=${wp_version} --locale=${wp_locale}"
su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins config create --dbname=${mysql_db} --dbuser=${mysql_user} --dbpass=$mysql_pass --dbprefix=${mysql_dbprefix}_"

if hash sendmail 2>/dev/null; then
    su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins core install --url=${domain} --title=${domain} --admin_user=${wp_user} --admin_password=${wp_password} --admin_email=${wp_email}"
else
    # don't try to send the welcome email if sendmail is not available
    echo "Sendmail was not detected. No email will be sent to the admin when this installation is complete"
    su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins core install --url=${domain} --title=${domain} --admin_user=${wp_user} --admin_password=${wp_password} --admin_email=${wp_email} --skip-email"
fi


# needed to work around wp-cli issues with passwords containing some special characters
# we hash and salt the $wp_password manually and inject it directly into the database
wp_password_hashed=$(echo "<?php
require_once( '/var/www/$domain/html/wp-load.php' );
\$password = '$wp_password';
\$hash_password = wp_hash_password(\$password);
echo \$hash_password;
?>" | php)

mysql "${mysql_db}" -e "UPDATE ${mysql_dbprefix}_users SET user_pass='$wp_password_hashed' WHERE user_login='$wp_user';"

# needed so wordpress doesn't freak out and denies direct access
su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins config set FS_METHOD direct"
su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins option update permalink_structure '/%postname%'"
# Let's remove this useless plugin from cluttering interface
su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins --skip-themes plugin delete hello-dolly"
# Let's ensure all themes and plugins are updated sometimes the stock bundled ones are outdated and show on first login.
su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins --skip-themes plugin update --all"
su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins --skip-themes theme update --all"

# permissions for the log file
su - "$user_name" -c "touch ${home_directory}/wp-content/debug.log"
chmod g+w "${home_directory}/wp-content/debug.log"

chmod -R g+w "${home_directory}"

# Restart Appropiate Webserver
if [ "$webserver_type" = "nginx" ]; then
    # restart nginx
	systemctl restart nginx
elif [ "$webserver_type" = "ols" ]  || [ "$webserver_type" = "ols-enterprise" ]; then
    # chaining this into the existing if condition vs making another one for just this check.
    su - "$user_name" -c "cd ${home_directory} && wp --skip-plugins plugin install litespeed-cache && wp --skip-plugins plugin activate litespeed-cache && wp litespeed-online init"
    # kill detached lsphp processes and restart ols
    killall lsphp >/dev/null 2>&1
	systemctl stop lsws >/dev/null 2>&1
	systemctl start lsws
fi

# prepare for ssh public key authentication
mkdir -p /var/www/$domain/.ssh_$user_name/
echo "Match User $user_name
PasswordAuthentication yes
AuthorizedKeysFile /var/www/$domain/.ssh_$user_name/authorized_keys" >> /etc/ssh/sshd_config
systemctl restart sshd

echo
echo "WordPress has been set up for $domain"