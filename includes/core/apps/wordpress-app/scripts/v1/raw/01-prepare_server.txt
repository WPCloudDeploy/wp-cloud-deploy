#!/bin/bash
if [[ "$EUID" -ne 0 ]]; then
	echo "Sorry, you need to run this as root"
	exit 1
fi

export DEBIAN_FRONTEND=noninteractive

install_memcached(){
	apt-get install -y memcached
	sed -i 's|OPTIONS=""|OPTIONS="-l 127.0.0.1 -U 0"|g' /etc/sysconfig/memcached
	#turn off UDP and bind to 127.0.0.1 only
	systemctl enable memcached
	systemctl start memcached
}

setup_litespeed_xml_configs(){
	wget -O /usr/local/lsws/conf/httpd_config.xml https://raw.githubusercontent.com/meramsey/blaqpanel/main/lsws/conf/httpd_config.xml
	chmod 750 /usr/local/lsws/conf/httpd_config.xml
	chown lsadm:nogroup /usr/local/lsws/conf/httpd_config.xml

	wget -O /usr/local/lsws/conf/templates/blaqpanel-default.xml https://raw.githubusercontent.com/meramsey/blaqpanel/main/lsws/conf/templates/blaqpanel-default.xml
	chmod 750 /usr/local/lsws/conf/templates/blaqpanel-default.xml
	chown lsadm:nogroup /usr/local/lsws/conf/templates/blaqpanel-default.xml

	wget -O /usr/local/lsws/conf/vhosts/Example/vhconf.xml https://raw.githubusercontent.com/meramsey/blaqpanel/main/lsws/conf/vhosts/vhconf.xml
	chmod 750 /usr/local/lsws/conf/vhosts/Example/vhconf.xml
	chown lsadm:nogroup /usr/local/lsws/conf/vhosts/Example/vhconf.xml
}

Install_CSF() {
	
	echo 'Disabling and stopping ufw'
	service ufw stop
	sudo ufw disable
	service ufw stop
	echo
	echo 'Installing CSF firewall requirements......'
	DEBIAN_FRONTEND=noninteractive apt-get install -y dnsutils libwww-perl liblwp-protocol-https-perl libgd-graph-perl net-tools ipset
	echo 'Installing CSF firewall......'
	wget -O /usr/src/csf.tgz  https://download.configserver.com/csf.tgz
	cd /usr/src && tar -xzf csf.tgz && cd csf && sh install.sh ;

	echo 'Opening ports in CSF.....'
	sed -i 's|^TESTING = .*|TESTING = "0"|' /etc/csf/csf.conf
	sed -i 's|^TCP_IN = .*|TCP_IN = "20,21,22,25,53,80,110,143,443,7080,1025"|' /etc/csf/csf.conf
	sed -i 's|^TCP_OUT =.*|TCP_OUT = "20,21,22,25,53,80,110,143,443,7080"|' /etc/csf/csf.conf
	sed -i 's|^UDP_IN =.*|UDP_IN = "20,21,22,25,53,80,110,143,443,7080"|' /etc/csf/csf.conf
	sed -i 's|^UDP_OUT =.*|UDP_OUT = "20,21,22,25,53,80,110,143,443,7080"|' /etc/csf/csf.conf
	sed -i 's|^TCP6_IN =.*|TCP6_IN = "20,21,22,25,53,80,110,143,443,7080"|' /etc/csf/csf.conf
	sed -i 's|^TCP6_OUT =.*|TCP6_OUT = "20,21,22,25,53,80,110,143,443,7080"|' /etc/csf/csf.conf
	sed -i 's|^UDP6_IN =.*|UDP6_IN = "20,21,22,25,53,80,110,143,443,7080"|' /etc/csf/csf.conf
	sed -i 's|^UDP6_OUT =.*|UDP6_OUT = "20,21,22,25,53,80,110,143,443,7080"|' /etc/csf/csf.conf


	# Good Universal default rules
	sed -i 's|^LF_IPSET =.*|LF_IPSET = "1"|' /etc/csf/csf.conf
	sed -i 's/^RESTRICT_SYSLOG =.*/RESTRICT_SYSLOG = "3"/g' /etc/csf/csf.conf
	sed -i 's/^LF_EMAIL_ALERT.*/LF_EMAIL_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^LF_PERMBLOCK_ALERT.*/LF_PERMBLOCK_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^LF_NETBLOCK_ALERT.*/LF_NETBLOCK_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^LF_TRIGGER_PERM.*/LF_TRIGGER_PERM = "1800"/g' /etc/csf/csf.conf
	sed -i 's/^LF_EMAIL_ALERT.*/LF_EMAIL_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^LF_SSHD =.*/LF_SSHD = "10"/g' /etc/csf/csf.conf
	sed -i 's/^LF_SSHD_PERM =.*/LF_SSHD_PERM = "1800"/g' /etc/csf/csf.conf
	sed -i 's/^LF_FTPD_PERM =.*/LF_FTPD_PERM = "1800"/g' /etc/csf/csf.conf
	sed -i 's/^LF_SMTPAUTH =.*/LF_SMTPAUTH = "10"/g' /etc/csf/csf.conf
	sed -i 's/^LF_SMTPAUTH_PERM =.*/LF_SMTPAUTH_PERM = "1800"/g' /etc/csf/csf.conf
	sed -i 's/^LF_POP3D =.*/LF_POP3D = "10"/g' /etc/csf/csf.conf
	sed -i 's/^LF_POP3D_PERM =.*/LF_POP3D_PERM = "1800"/g' /etc/csf/csf.conf
	sed -i 's/^LF_IMAPD =.*/LF_IMAPD = "10"/g' /etc/csf/csf.conf
	sed -i 's/^LF_IMAPD_PERM =.*/LF_IMAPD_PERM = "1800"/g' /etc/csf/csf.conf
	sed -i 's/^LF_HTACCESS_PERM =.*/LF_HTACCESS_PERM = "1800"/g' /etc/csf/csf.conf
	sed -i 's/^LF_MODSEC =.*/LF_MODSEC = "10"/g' /etc/csf/csf.conf
	sed -i 's/^LF_MODSEC_PERM =.*/LF_MODSEC_PERM = "1800"/g' /etc/csf/csf.conf
	sed -i 's/^LF_SSH_EMAIL_ALERT =.*/LF_SSH_EMAIL_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^LF_WEBMIN_EMAIL_ALERT =.*/LF_WEBMIN_EMAIL_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^LF_QUEUE_ALERT =.*/LF_QUEUE_ALERT = "2000"/g' /etc/csf/csf.conf
	sed -i 's/^LF_QUEUE_INTERVAL =.*/LF_QUEUE_INTERVAL = "300"/g' /etc/csf/csf.conf
	sed -i 's/^RT_RELAY_ALERT =.*/RT_RELAY_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^RT_RELAY_LIMIT =.*/RT_RELAY_LIMIT = "500"/g' /etc/csf/csf.conf
	sed -i 's/^RT_RELAY_BLOCK =.*/RT_RELAY_BLOCK = "0"/g' /etc/csf/csf.conf
	sed -i 's/^RT_AUTHRELAY_ALERT =.*/RT_AUTHRELAY_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^RT_AUTHRELAY_LIMIT =.*/RT_AUTHRELAY_LIMIT = "100"/g' /etc/csf/csf.conf
	sed -i 's/^RT_AUTHRELAY_BLOCK =.*/RT_AUTHRELAY_BLOCK = "0"/g' /etc/csf/csf.conf
	sed -i 's/^RT_POPRELAY_ALERT =.*/RT_POPRELAY_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^RT_POPRELAY_LIMIT =.*/RT_POPRELAY_LIMIT = "100"/g' /etc/csf/csf.conf
	sed -i 's/^RT_POPRELAY_BLOCK =.*/RT_POPRELAY_BLOCK = "0"/g' /etc/csf/csf.conf
	sed -i 's/^RT_LOCALRELAY_ALERT =.*/RT_LOCALRELAY_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^RT_LOCALRELAY_LIMIT =.*/RT_LOCALRELAY_LIMIT = "100"/g' /etc/csf/csf.conf
	sed -i 's/^RT_LOCALHOSTRELAY_ALERT =.*/RT_LOCALHOSTRELAY_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^RT_LOCALHOSTRELAY_LIMIT =.*/RT_LOCALHOSTRELAY_LIMIT = "100"/g' /etc/csf/csf.conf
	sed -i 's/^RT_ACTION =.*/RT_ACTION = ""/g' /etc/csf/csf.conf
	sed -i 's/^CT_EMAIL_ALERT =.*/CT_EMAIL_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^PT_USERPROC =.*/PT_USERPROC = "0"/g' /etc/csf/csf.conf
	sed -i 's/^PT_USERMEM.*/PT_USERMEM = "0"/g' /etc/csf/csf.conf
	sed -i 's/^PT_USERRSS.*/PT_USERRSS = "0"/g' /etc/csf/csf.conf
	sed -i 's/^PT_USERTIME.*/PT_USERTIME = "0"/g' /etc/csf/csf.conf
	sed -i 's/^PT_USERKILL_ALERT.*/PT_USERKILL_ALERT = "0"/g' /etc/csf/csf.conf
	sed -i 's/^PT_LOAD =.*/PT_LOAD = "0"/g' /etc/csf/csf.conf
	# WebUI set user and passwords.
	WEB_UI_ADMIN_USER="admin"
	WEB_UI_ADMIN_PASS="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13)"
	sed -i 's/^UI_USER =.*/UI_USER = "'$WEB_UI_ADMIN_USER'"/g' /etc/csf/csf.conf
    sed -i 's/^UI_PASS =.*/UI_PASS = "'$WEB_UI_ADMIN_PASS'"/g' /etc/csf/csf.conf
	# Enable WebUI 
	sed -i 's/^UI =.*/UI = "1"/g' /etc/csf/csf.conf
    sed -i 's/^UI_PORT =.*/UI_PORT = "1025"/g' /etc/csf/csf.conf
    sed -i 's/^UI_ALLOW =.*/UI_ALLOW = "0"/g' /etc/csf/csf.conf
    sed -i 's/^RESTRICT_UI =.*/RESTRICT_UI = "0"/g' /etc/csf/csf.conf
	
	# Default timeout logs you out pretty fast while in middle of deep settings so lets avoid that headache.
	sed -i 's/^UI_TIMEOUT =.*/UI_TIMEOUT = "1200"/g' /etc/csf/csf.conf
	sed -i 's|^HTACCESS_LOG =.*|HTACCESS_LOG = "/usr/local/lsws/logs/error.log"|g' /etc/csf/csf.conf
	# we aren't using modsec yet so commenting this out for now.
	#sed -i 's|^MODSEC_LOG =.*|MODSEC_LOG = "/usr/local/lsws/logs/auditmodsec.log"|g' /etc/csf/csf.conf
	
	SERVER_IP="$(wget -qO- -t1 -T2 ipv4.icanhazip.com)"
	echo "You can access CSF Firewall WebUI at below url: "
	echo "https://$SERVER_IP:1025"
	echo "Login credentials are:"
	echo "User: $WEB_UI_ADMIN_USER"
	echo "Password: $WEB_UI_ADMIN_PASS"
	
	
	# Ubuntu based csf
	sed -i 's|^SSHD_LOG =.*|SSHD_LOG = "/var/log/auth.log"|g' /etc/csf/csf.conf
	sed -i 's|^SU_LOG =.*|SU_LOG = "/var/log/auth.log"|g' /etc/csf/csf.conf
	sed -i 's|^FTPD_LOG =.*|FTPD_LOG = "/var/log/auth.log"|g' /etc/csf/csf.conf
	sed -i 's|^SMTPAUTH_LOG =.*|SMTPAUTH_LOG = "/var/log/mail.log"|g' /etc/csf/csf.conf
	sed -i 's|^POP3D_LOG =.*|POP3D_LOG = "/var/log/mail.log"|g' /etc/csf/csf.conf
	sed -i 's|^IMAPD_LOG =.*|IMAPD_LOG = "/var/log/mail.log"|g' /etc/csf/csf.conf
	sed -i 's|^IPTABLES_LOG =.*|IPTABLES_LOG = "/var/log/kern.log"|g' /etc/csf/csf.conf
	sed -i 's/^SYSLOG_CHECK =.*/SYSLOG_CHECK = "300"/g' /etc/csf/csf.conf
	sed -i 's|^SYSLOG_LOG =.*|SYSLOG_LOG = "/var/log/syslog"|g' /etc/csf/csf.conf
	# You should disable UseDNS by editing /etc/ssh/sshd_config and setting:
	# Otherwise, lfd will be unable to track SSHD login failures successfully as the log files will not report IP addresses
	sed -i -e 's/#UseDNS no/UseDNS no/' /etc/ssh/sshd_config
	
	# restart csf
	# Delay restart csf after script has finished installing and reporting back
	csf -ra | at now + 1 minutes

}

install_redis(){
	apt-get install -y redis redis-tools
	sed -i "s/supervised no/supervised systemd/g" /etc/redis/redis.conf
	systemctl stop redis-server
	rm -f /var/run/redis/redis-server.pid
	if ifconfig -a | grep inet6; then
		echo -e "\nIPv6 detected...\n"
	else
		sed -i 's|bind 127.0.0.1 ::1|bind 127.0.0.1|g' /etc/redis/redis.conf
		echo -e "\n no IPv6 detected..."
	fi
	systemctl enable redis-server
  	systemctl start redis-server
}

setup_mysql_logging(){
	mkdir -p /var/log/mysql/
	chown mysql:mysql /var/log/mysql/
	chmod 0770 /var/log/mysql/
	mkdir -p /var/log/mysql/archive/
	chown mysql:mysql /var/log/mysql/archive/
	chmod 0770 /var/log/mysql/archive/
	wget -O /etc/logrotate.d/mariadb https://raw.githubusercontent.com/meramsey/blaqpanel/main/mariadb/mariadb-logrotate
	wget -O /etc/my.cnf https://github.com/meramsey/blaqpanel/raw/main/mariadb/my.cnf
}

setup_mytop(){
	wget -O /root/.mytop https://raw.githubusercontent.com/meramsey/blaqpanel/main/mariadb/.mytop
	apt install -y mytop
	apt-get install -y mariadb-client mariadb-server galera-4 libcgi-fast-perl libcgi-pm-perl libdbd-mariadb-perl libfcgi-perl libhtml-template-perl libmariadb3 libpmem1 socat
}


config_mysql_tweaks(){
	setup_mysql_logging
	setup_mytop
	systemctl restart mysql||service mysql restart
}

raise_file_limits(){
	script="https://raw.githubusercontent.com/meramsey/blaqpanel/main/scripts/increase_max_open_files_limits.sh"; bash <(curl -s $script || wget -qO - $script)
}

if [[ "$interactive" != "no" ]]; then
    clear
    echo "This script will install $webserver_type, MariaDB, PHP, Certbot and WP-CLI in your system"
    echo
    read -p "Press enter to start setup"
fi

#set a variable to hold the location of the checkpoint folder.
CHKPOINT_FOLDER='.wpcd-server-provision-checkpoints'

#create the checkpoint folder
if [ ! -d $CHKPOINT_FOLDER ]
then
	mkdir $CHKPOINT_FOLDER
fi

# clear the screen
clear

#check to see if this script has been run before. if it has, show message on the screen but continue.
if [ -f "$CHKPOINT_FOLDER/script-ran-once.txt" ]
then
	echo "This script has been run at least once before - we'll attempt to pick up from where we last left off.."
else
	#create checkpoint file to indicate that script is running; if for some reason it already exists no harm no foul.
	touch "$CHKPOINT_FOLDER/script-ran-once.txt"
fi


# Refresh existing repositories
if [ -f "$CHKPOINT_FOLDER/checkpoint10-end.txt" ]
then
	echo "Skip refreshing of repositories since it has already been done."
else
	echo "$(date): Refreshing repositories..."
	apt-get update > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	
	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint10-end.txt"	
fi #checkpoint10.txt

# Add other repositories
if [ -f "$CHKPOINT_FOLDER/checkpoint20-end.txt" ]
then
	echo "Skip adding common repositories since it has already been done."
else 
	# Create directory if it doesn't exist. Else, add-apt-repository will be unable to configure the PPAs
	mkdir -p /etc/apt/sources.list.d/

	# Adding common software properties stack
	echo "$(date): Adding common software properties to make repository management easier..."
	apt-get install software-properties-common -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	
	#Install redis/memcached by default
	install_redis
	install_memcached
	
	#Nginx Wrapper
	if [ "$webserver_type" = "nginx" ]; then
		# Adding additional repositories
		echo "$(date): Adding additional repositories..."
		LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php -y > /dev/null 2>&1
		if [ $? -ne 0 ]  
		then
			echo "Failed!  Quitting process"
			exit 1
		fi
		LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/nginx -y > /dev/null 2>&1
		if [ $? -ne 0 ]  
		then
			echo "Failed!  Quitting process"
			exit 1
		fi
	fi
	
	
	
	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint20-end.txt"
fi #checkpoint20.txt


#Nginx Wrapper
if [ "$webserver_type" = "nginx" ]; then
	# Adding and installing LEMP stack, starting with NGINX and MARIADB - we'll do PHP in the next block.
	# @TODO: We should probably make a loop and loop through all these packages one by one 
	echo "$(date): Installing LEMP stack - this will take a while!"
	apt-get install nginx mariadb-server mariadb-client apache2-utils unzip rename -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	# Adding and installing PHP stack
	# @TODO: We should probably make a loop and loop through all these packages one by one as well. 
	echo "$(date): Installing PHP versions - this will take a while too!"
	echo "$(date): .....PHP 5.6"
	apt-get install php5.6 php5.6-fpm php5.6-mbstring php5.6-curl php5.6-mysql php5.6-xml php5.6-zip php5.6-gd php5.6-imap php5.6-soap php5.6-bcmath php5.6-imagick -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....PHP 7.1"
	apt-get install php7.1 php7.1-fpm php7.1-mbstring php7.1-curl php7.1-mysql php7.1-xml php7.1-zip php7.1-gd php7.1-imap php7.1-soap php7.1-bcmath php7.1-imagick -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....PHP 7.2"
	apt-get install php7.2 php7.2-fpm php7.2-mbstring php7.2-curl php7.2-mysql php7.2-xml php7.2-zip php7.2-gd php7.2-imap php7.2-soap php7.2-bcmath php7.2-imagick -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....PHP 7.3"
	apt-get install php7.3 php7.3-fpm php7.3-mbstring php7.3-curl php7.3-mysql php7.3-xml php7.3-zip php7.3-gd php7.3-imap php7.3-soap php7.3-bcmath php7.3-imagick -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....PHP 7.4"
	apt-get install php7.4 php7.4-fpm php7.4-mbstring php7.4-curl php7.4-mysql php7.4-xml php7.4-zip php7.4-gd php7.4-imap php7.4-soap php7.4-bcmath php7.4-imagick -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....PHP 8.0"
	apt-get install php8.0 php8.0-fpm php8.0-mbstring php8.0-curl php8.0-mysql php8.0-xml php8.0-zip php8.0-gd php8.0-imap php8.0-soap php8.0-bcmath php8.0-imagick -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....PHP 8.1"
	apt-get install php8.1 php8.1-fpm php8.1-mbstring php8.1-curl php8.1-mysql php8.1-xml php8.1-zip php8.1-gd php8.1-imap php8.1-soap php8.1-bcmath php8.1-imagick -y > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	# Use PHP 7.4 as the default
	echo "$(date): Making PHP 7.4 the default PHP version"
	update-alternatives --set php /usr/bin/php7.4 > /dev/null 2>&1
fi

# OLS Wrapper
if [ "$webserver_type" = "ols" ]; then
	# Adding and installing MARIADB.
	echo "$(date): Installing OpenLiteSpeed/OLS Enterprise stack - this will take a while!"

	# OLS/LSPHP installation here specifying lsphp74
	# https://openlitespeed.org/kb/1-click-install/#Where_is_OLS_installed_to
	bash <( curl -k https://raw.githubusercontent.com/meramsey/ols1clk/master/ols1clk.sh ) --quiet --lsphp 74
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	
	# Custom OLS Global default to inherit from
	wget -O /usr/local/lsws/conf/httpd_config.conf https://raw.githubusercontent.com/meramsey/blaqpanel/main/lsws/conf/httpd_config.conf > /dev/null 2>&1
	chmod 750 /usr/local/lsws/conf/httpd_config.conf > /dev/null 2>&1
	chown lsadm:nogroup /usr/local/lsws/conf/httpd_config.conf > /dev/null 2>&1
	# Custom panel default
	wget -O /usr/local/lsws/conf/templates/blaqpanel-default.conf https://raw.githubusercontent.com/meramsey/blaqpanel/main/lsws/conf/templates/blaqpanel-default.conf > /dev/null 2>&1
	chmod 750 /usr/local/lsws/conf/templates/blaqpanel-default.conf > /dev/null 2>&1
	chown lsadm:nogroup /usr/local/lsws/conf/templates/blaqpanel-default.conf > /dev/null 2>&1
	systemctl stop lsws >/dev/null 2>&1
    systemctl start lsws >/dev/null 2>&1
	
	echo "$(date): Installing MariaDB repository and packages"
	curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash -s -- --skip-maxscale > /dev/null 2>&1
	# echo "$(date): Installing MariaDB server and helper packages"
	apt-get install -y mariadb-server mariadb-client apache2-utils unzip rename > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	
	echo "$(date): Setting up MariaDB tweaks"
	config_mysql_tweaks
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	# install build essentials for pecl/pear and dev requirements
	apt-get install -y libmagickwand-dev pkg-config build-essential snmp pkg-config openssl libssl-dev autoconf automake libtool libxml2-dev libssl-dev
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	# Install all possible lsphp-dev and pear and packages
	apt-get install -y lsphp?? lsphp??-common lsphp??-dev lsphp??-pear lsphp??-mysql lsphp??-imap lsphp??-curl lsphp??-memcached lsphp??-redis lsphp*
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	
	# Use PHP 7.4 as the default
	echo "$(date): Making PHP 7.4 the default PHP version"
	rm -f /usr/bin/php > /dev/null 2>&1
	rm -f /usr/bin/phar > /dev/null 2>&1
	rm -f /usr/bin/phar.phar > /dev/null 2>&1
	rm -f /usr/bin/pecl > /dev/null 2>&1
	rm -f /usr/lib/pear > /dev/null 2>&1
	# https://stackoverflow.com/questions/55513672/how-to-add-a-path-to-update-alternatives-config-php
	update-alternatives --install /usr/bin/php php /usr/local/lsws/lsphp74/bin/php 100 > /dev/null 2>&1
	update-alternatives --install /usr/bin/phar phar /usr/local/lsws/lsphp74/bin/phar7.4.phar 100 > /dev/null 2>&1
	update-alternatives --install /usr/bin/phar.phar phar.phar /usr/local/lsws/lsphp74/bin/phar7.4.phar 100 > /dev/null 2>&1
	update-alternatives --install /usr/bin/pecl pecl /usr/local/lsws/lsphp74/bin/pecl 100 > /dev/null 2>&1
	update-alternatives --install /usr/lib/pear pear /usr/local/lsws/lsphp74/bin/pear 100 > /dev/null 2>&1
	
	echo "$(date): Setup php sessions for lsphp versions"
	bash <(curl https://raw.githubusercontent.com/meramsey/blaqpanel/main/scripts/setup_php_sessions.sh)
	
	echo 'Installling OLS htaccess scan crontab file for Cron to scan every 3 minutes for .htaccess file changes and restart openlitespeed'
	wget -O /etc/cron.d/openlitespeed_htaccess_scan https://raw.githubusercontent.com/meramsey/blaqpanel/main/cron.d/openlitespeed_htaccess_scan > /dev/null 2>&1
	chmod +x /etc/cron.d/openlitespeed_htaccess_scan > /dev/null 2>&1
	
	echo "$(date): Update pecl for lsphp versions"
	for version in $(ls /usr/local/lsws|grep lsphp); do /usr/local/lsws/"${version}"/bin/pecl channel-update pecl.php.net > /dev/null 2>&1; done

	echo "$(date): Update PHP common settings"
	sudo grep -Eilr '^memory_limit' --include=\*php.ini /usr/local/lsws/lsphp* | xargs sed -i -e 's/^memory_limit.*/memory_limit = 1024M/g' -e 's/^post_max_size.*/post_max_size = 2050M/g' -e 's/^upload_max_filesize.*/upload_max_filesize = 2050M/g' -e 's/^max_execution_time.*/max_execution_time = 7200/g'
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi

	echo "$(date): Install timezonedb pecl extension needed for Litespeed/OLS"
	Extension='timezonedb'; for phpver in $(ls -1 /usr/local/lsws/ |grep lsphp | sed 's/lsphp//g'); do php_ini="/usr/local/lsws/lsphp${phpver}/etc/php/$(echo $phpver | sed 's/^\(.\{1\}\)/\1./')/litespeed/php.ini"; printf '\n' |/usr/local/lsws/lsphp${phpver}/bin/pecl install ${Extension} && echo "extension=${Extension}.so" >> ${php_ini}; done;


	echo "$(date): Update timezone from null for lsphp to UTC by default"
	for phpver in $(ls -1 /usr/local/lsws/ |grep lsphp | sed 's/lsphp//g') ; do echo ""; echo "LSPHP $phpver" ; sed -i -e 's|^;date.timezone.*|date.timezone = "UTC"|g' /usr/local/lsws/lsphp${phpver}/etc/php/$(echo $phpver | sed 's/^\(.\{1\}\)/\1./')/litespeed/php.ini; /usr/local/lsws/lsphp${phpver}/bin/php -i |grep -Ei 'date.timezone' && echo "" ; done; service lsws restart; killall lsphp;
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
fi



# Install Certbot...
if [ -f "$CHKPOINT_FOLDER/checkpoint100-end.txt" ]
then
	echo "Skip installing certbot since it has already been done."
else	
	echo "$(date): Installing Certbot. This can take more than 5 minutes..."
	if ! hash snap 2>/dev/null; then
		apt-get install snapd -y
		if [ $? -ne 0 ]; then
			echo "Failed!  Quitting process"
			exit 1
		fi
	fi
	echo "$(date): .....Installing Snap Core for Certbot..."
	snap install core > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....Refreshing Snap Core..."
	snap refresh core > /dev/null 2>&1
	#No checks after the "snap refresh core" command because sometimes the snap servers return a false error.  And refresh isn't critical here.

	echo "$(date): .....Installing Classic Certbot..."
	snap install --classic certbot > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....Installing Certbot Cloudflare support..."
	snap install certbot-dns-cloudflare > /dev/null 2>&1
	if [ $? -ne 0 ]  
	then
		echo "Failed!  Quitting process"
		exit 1
	fi
	echo "$(date): .....Installing remaining Certbot components..."
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	snap install certbot-dns-dnsmadeeasy > /dev/null 2>&1
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	snap install certbot-dns-google > /dev/null 2>&1
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	snap install certbot-dns-ovh > /dev/null 2>&1
	snap set certbot trust-plugin-with-root=ok > /dev/null 2>&1
	snap install certbot-dns-route53 > /dev/null 2>&1
	
	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint100-end.txt"
fi #checkpoint100.txt

# if the unattended-upgrades package isn't installed, install it
if ! dpkg -s unattended-upgrades &>/dev/null; then
	echo "$(date): Installing Unattended Upgrade process since it was not enabled on this server..."
	apt-get install -y unattended-upgrades
fi

################################################################################################################
# For all of these configuration file updates, we want the entire block to run once and only once.
# If it fails halfway, then restarting the script should show an error message.
# Therefore our checkpoint150 logic is a bit different.  
# Also, this is a LARGE block with some commands are NOT indented. so you'll need to search for the end using CTRL-F or 
# similar.
################################################################################################################

if [ -f "$CHKPOINT_FOLDER/checkpoint150.txt" ]
then
	echo "Skip updating configuration files since it has already been done."
	if [ ! -f "$CHKPOINT_FOLDER/checkpoint150-end.txt" ]	
	then
		echo "Block 150, updating configuration files, was started but never completed. We cannot recover - please start over with a new server."
		exit 1
	fi	
else
	#create checkpoint file to indicate that we are running this block.
	touch "$CHKPOINT_FOLDER/checkpoint150.txt"

	# enable unattended-upgrades
	echo 'APT::Periodic::Update-Package-Lists "1";
	APT::Periodic::Unattended-Upgrade "1";' > /etc/apt/apt.conf.d/20auto-upgrades
	
	
	#Nginx Wrapper
	if [ "$webserver_type" = "nginx" ]; then
		echo $webserver_type evaluated as true
		# Set up unattended upgrades for the PPAs
		echo "$(date): Adding additional repositories to unattended upgrade process..."
		sed -i '/Unattended-Upgrade::Allowed-Origins /a "LP-PPA-ondrej-nginx:${distro_codename}";' /etc/apt/apt.conf.d/50unattended-upgrades
		sed -i '/Unattended-Upgrade::Allowed-Origins /a "LP-PPA-ondrej-php:${distro_codename}";' /etc/apt/apt.conf.d/50unattended-upgrades	

		# Update php.ini file to increase filesize uploads allowed in WordPress
		echo "$(date): Adding required entries in php.ini to allow for larger file uploads in WordPress..."
		sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 25M/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/post_max_size = 8M/post_max_size = 25M/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 25M/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/post_max_size = 8M/post_max_size = 25M/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 25M/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/post_max_size = 8M/post_max_size = 25M/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 25M/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/post_max_size = 8M/post_max_size = 25M/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 25M/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/post_max_size = 8M/post_max_size = 25M/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 25M/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/post_max_size = 8M/post_max_size = 25M/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/upload_max_filesize = 2M/upload_max_filesize = 25M/g" /etc/php/8.1/fpm/php.ini
		sed -i "s/post_max_size = 8M/post_max_size = 25M/g" /etc/php/8.1/fpm/php.ini

		# Update php.ini to enable and configure opcache
		sed -i "s/;opcache.enable=1/opcache.enable=1/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.enable=1/opcache.enable=1/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.enable=1/opcache.enable=1/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.enable=1/opcache.enable=1/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.enable=1/opcache.enable=1/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.enable=1/opcache.enable=1/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.enable=1/opcache.enable=1/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=100000/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.memory_consumption=128/opcache.memory_consumption=128/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.save_comments=1/opcache.save_comments=1/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" /etc/php/8.1/fpm/php.ini
		

		sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.use_cwd=1/opcache.use_cwd=1/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.validate_root=0/opcache.validate_root=1/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.validate_permission=0/opcache.validate_permission=1/g" /etc/php/8.1/fpm/php.ini

		sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /etc/php/5.6/fpm/php.ini
		sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /etc/php/7.1/fpm/php.ini
		sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /etc/php/7.2/fpm/php.ini
		sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /etc/php/7.3/fpm/php.ini
		sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /etc/php/7.4/fpm/php.ini
		sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /etc/php/8.0/fpm/php.ini
		sed -i "s/;opcache.file_update_protection=2/opcache.file_update_protection=60/g" /etc/php/8.1/fpm/php.ini

		# Restarting php
		echo "$(date): Restarting PHP processes..."
		systemctl restart php5.6-fpm > /dev/null 2>&1
		systemctl restart php7.1-fpm > /dev/null 2>&1
		systemctl restart php7.2-fpm > /dev/null 2>&1
		systemctl restart php7.3-fpm > /dev/null 2>&1
		systemctl restart php7.4-fpm > /dev/null 2>&1
		systemctl restart php8.0-fpm > /dev/null 2>&1
		systemctl restart php8.1-fpm > /dev/null 2>&1

		# Configure NGINX to accept extra-long domain names (the seven back-slashes are to insert spaces before the actual line is inserted )
		sed -i '/^http {/a \ \n \ \ \ \ \ \ \ # Accept extra-long domain names \n \ \ \ \ \ \ \ server_names_hash_bucket_size 128;' /etc/nginx/nginx.conf

		# Configure nginx worker_cpu_affinity, worker_rlimit_nofile, pcre_jit, multi_accept, worker_connections, accept_mutex, epoll
		sed -i '/^worker_processes auto;/a worker_cpu_affinity auto;' /etc/nginx/nginx.conf
		sed -i '/^worker_processes auto;/a worker_rlimit_nofile 100000;' /etc/nginx/nginx.conf
		sed -i '/^pid \/run\/nginx.pid;/a pcre_jit on;' /etc/nginx/nginx.conf

		sed -i "s/# multi_accept on;/multi_accept on;/g" /etc/nginx/nginx.conf  ## Search for commented out multi_accept_on and uncomment it.
		sed -i "s/worker_connections 768;/worker_connections 2048;/g" /etc/nginx/nginx.conf  ## search for existing worker_connections directive and increase it.

		sed -i '/^events {/a \ \ \ \ \ \ \ \ use epoll;' /etc/nginx/nginx.conf  ## add epoll directive to events block
		sed -i '/^events {/a \ \ \ \ \ \ \ \ accept_mutex on;' /etc/nginx/nginx.conf ## add accept_mutex directive to events block

		# sed -i '/^http {/a \ \ \ \ \ \ \  # TLS Dynamic Records Patch: See https://github.com/nginx-modules/ngx_http_tls_dyn_size \n \ \ \ \ \ \ \ ssl_dyn_rec_enable on;' /etc/nginx/nginx.conf  ## ssl_dyn_rec_enable
		sed -i '/^http {/a \ \n \ \ \ \ \ \ \ # AIO: See https://www.nginx.com/blog/thread-pools-boost-performance-9x/ and http://nginx.org/en/docs/http/ngx_http_core_module.html#aio \n \ \ \ \ \ \ \ aio threads;' /etc/nginx/nginx.conf  ## AIO threads
		sed -i '/^http {/a \ \ \ \ \ \ \ \ variables_hash_bucket_size 512;' /etc/nginx/nginx.conf ## increase size of hash table
		sed -i '/^http {/a \ \ \ \ \ \ \ \ variables_hash_max_size 4096;' /etc/nginx/nginx.conf  ## increase size of hash table
		sed -i '/^http {/a \ \ \ \ \ \ \ \ keepalive_timeout 8;' /etc/nginx/nginx.conf ## add keepalive_timeout directive to http block to reduce keep_alive directive from the default 75s to 8s.
		sed -i '/^http {/a \ \ \ \ \ \ \ \ reset_timedout_connection on;' /etc/nginx/nginx.conf ## add reset_timedout_connection directive to remove data from memory as soon as a connection times out. See http://nginx.org/en/docs/http/ngx_http_core_module.html#reset_timedout_connection

		# Install rate limiting zone for wp-login.php (the seven back-slashes are to insert spaces before the actual line is inserted )
		sed -i '/default_type application\/octet-stream;/a \ \n \ \ \ \ \ \ \ # Set zone to restrict rate of trying certain actions - primarily logins \n \ \ \ \ \ \ \ limit_req_zone \$binary_remote_addr zone=WPLOGIN:10m rate=10r\/s;' /etc/nginx/nginx.conf

		# Create some folders to hold user custom config files
		mkdir -p /etc/nginx/userconfigs/
		mkdir -p /etc/nginx/userconfigs/http		# User custom configs for the the http block will go here.
		mkdir -p /etc/nginx/userconfigs/server		# User custom configs for the server block will go here.
		mkdir -p /etc/nginx/userconfigs/site		# User custom configs for a particular site will go here.

		# Make sure we include the /etc/nginx/userconfigs/http/*.conf files in the nginx.conf file.
		sed -i '/include \/etc\/nginx\/conf.d\/\*.conf;/a \ \ \ \ \ \ \ \ include \/etc\/nginx\/userconfigs\/http\/*[.]conf;' /etc/nginx/nginx.conf  

		# create /etc/nginx/common/6g.conf, which will contain the 6G Firewall 
		echo "$(date): Installing 6G Firewall..."
		mkdir -p /etc/nginx/common/
		cat >> /etc/nginx/common/6g.conf <<-'EOF'
		# 6G Firewall mappings adapted from https://perishablepress.com/6g/

		# User agents
		map $http_user_agent $bad_bot {
			default 0;
			"~*([a-z0-9]{2000})" 1;
			~*(archive.org|binlar|casper|checkpriv|choppy|clshttp|cmsworld|diavol|dotbot|extract|feedfinder|flicky|g00g1e|harvest|heritrix|htmlparser|libwww|httrack|kmccrew|loader|miner|nikto|nutch|planetwork|postrank|purebot|pycurl|python|seekerspider|siclab|skygrid|sqlmap|sucker|turnit|vikspider|winhttp|xxxyy|youda|zmeu|zune) 2;
		}

		# Referrers
		map $http_referer $bad_referer {
			default 0;
			"~*([a-z0-9]{2000})" 1;
			~*(semalt.com|todaperfeita) 2;
		}

		# Query strings
		map $query_string $bad_querystring {
			default 0;
			~*(eval\() 1;
			~*(127\.0\.0\.1) 2;
			"~*([a-z0-9]{2000})" 3;
			"~*(javascript:)(.*)(;)" 4;
			~*(base64_encode)(.*)(\() 5;
			~*(GLOBALS|REQUEST)(=|\[|%) 6;
			~*(<|%3C)(.*)script(.*)(>|%3) 7;
			~*(\\|\.\.\.|\.\./|~|`|<|>|\|) 8;
			~*(boot\.ini|etc/passwd|self/environ) 9;
			~*(thumbs?(_editor|open)?|tim(thumb)?)\.php 10;
			~*(\'|\")(.*)(drop|insert|md5|select|union|concat) 11;
			~*(/|%2f)(:|%3a)(/|%2f) 12;
		}

		# Request strings
		map $request_uri $bad_request {
			default 0;
			"~*([a-z0-9]{2000})" 1;
			~*(ftp|php):/ 2;
			~*(base64_encode)(.*)(\() 3;
			~*(=\\\'|=\\%27|/\\\'/?)\. 4;
			"~*/(\$(\&)?|\*|\"|\.ht|,|&|&amp;?)/?$" 5;
			~*(\{0\}|\(/\(|\.\.\.|\+\+\+|\\\"\\\") 6;
			"~*(~|`|<|>|;|\\|\s|\{|\}|\[|\]|\|)" 7;
			~*/(=|\$&|_mm|cgi-|etc/passwd|muieblack) 8;
			"~*(&pws=0|\_vti\_|\(null\)|\{\$itemURL\}|echo(.*)kae|etc/passwd|eval\(|self/environ)" 9;
			~*\.(aspx?|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rar|rdf)$ 10;
			~*/(^$|(wp-)?config|mobiquo|phpinfo|shell|sqlpatch|thumb|thumb_editor|thumbopen|timthumb|webshell)\.php 11;
		}

		# Request methods
		map $request_method $not_allowed_method {
			default 0;
			~*^(connect) 1;
			~*^(debug) 2;
			~*^(delete) 3;
			~*^(move) 4;
			~*^(patch) 5;
			~*^(put) 6;
			~*^(trace) 7;
			~*^(track) 8;
		}
		EOF



		# create /etc/nginx/common/7g.conf, which will contain the 7G Firewall 
		echo "$(date): Installing 7G Firewall..."
		mkdir -p /etc/nginx/common/
		cat >> /etc/nginx/common/7g.conf <<-'EOF'
		# 7G FIREWALL - NGINX v1.0
		# @ https://perishablepress.com/7g-firewall/
		# @ https://perishablepress.com/7g-firewall-nginx/

		map $http_user_agent $bad_bot_7g {
			
			default 0;
			"~*([a-z0-9]{2000})" 1;
			"~*(&lt;|%0a|%0d|%27|%3c|%3e|%00|0x00)" 2;
			"~*((c99|php|web)shell|remoteview|site((.){0,2})copier)" 3;
			~*(base64_decode|bin/bash|disconnect|eval|lwp-download|unserialize|\\\x22) 4;
			~*(360Spider|acapbot|acoonbot|ahrefs|alexibot|asterias|attackbot|backdorbot|becomebot|binlar|blackwidow|blekkobot|blexbot|blowfish|bullseye|bunnys|butterfly|careerbot|casper|checkpriv|cheesebot|cherrypick|chinaclaw|choppy|clshttp|cmsworld|copernic|copyrightcheck|cosmos|crescent|cy_cho|datacha|demon|diavol|discobot|dittospyder|dotbot|dotnetdotcom|dumbot|emailcollector|emailsiphon|emailwolf|exabot|extract|eyenetie|feedfinder|flaming|flashget|flicky|foobot|g00g1e|getright|gigabot|go-ahead-got|gozilla|grabnet|grafula|harvest|heritrix|httrack|icarus6j|jetbot|jetcar|jikespider|kmccrew|leechftp|libweb|linkextractor|linkscan|linkwalker|loader|miner|majestic|mechanize|mj12bot|morfeus|moveoverbot|netmechanic|netspider|nicerspro|nikto|ninja|nutch|octopus|pagegrabber|planetwork|postrank|proximic|purebot|pycurl|python|queryn|queryseeker|radian6|radiation|realdownload|rogerbot|scooter|seekerspider|semalt|seznambot|siclab|sindice|sistrix|sitebot|siteexplorer|sitesnagger|skygrid|smartdownload|snoopy|sosospider|spankbot|spbot|sqlmap|stackrambler|stripper|sucker|surftbot|sux0r|suzukacz|suzuran|takeout|teleport|telesoft|true_robots|turingos|turnit|vampire|vikspider|voideye|webleacher|webreaper|webstripper|webvac|webviewer|webwhacker|winhttp|wwwoffle|woxbot|xaldon|xxxyy|yamanalab|yioopbot|youda|zeus|zmeu|zune|zyborg) 5;
			
		}

		map $http_referer $bad_referer_7g {
			
			default 0;
			"~*([a-z0-9]{2000})" 1;
			~*(semalt.com|todaperfeita) 2;
			~*(ambien|blue\spill|cialis|cocaine|ejaculat|erectile|erections|hoodia|huronriveracres|impotence|levitra|libido|lipitor|phentermin|pro[sz]ac|sandyauer|tramadol|troyhamby|ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo) 3;
			
		}

		map $query_string $bad_querystring_7g {
			
			default 0;
			"~*([a-z0-9]{2000})" 1;
			~*(/|%2f)(:|%3a)(/|%2f) 2;
			~*(/|%2f)(\*|%2a)(\*|%2a)(/|%2f) 3;
			~*(~|`|<|>|\^|\|\\|0x00|%00|%0d%0a) 4;
			~*(cmd|command)(=|%3d)(chdir|mkdir)(.*)(x20) 5;
			~*(fck|ckfinder|fullclick|ckfinder|fckeditor) 6;
			~*(/|%2f)((wp-)?config)((\.|%2e)inc)?((\.|%2e)php) 7;
			~*(thumbs?(_editor|open)?|tim(thumbs?)?)((\.|%2e)php) 8;
			~*(absolute_|base|root_)(dir|path)(=|%3d)(ftp|https?) 9;
			~*(localhost|loopback|127(\.|%2e)0(\.|%2e)0(\.|%2e)1) 10;
			~*(\.|20)(get|the)(_|%5f)(permalink|posts_page_url)(\(|%28) 11;
			~*(s)?(ftp|http|inurl|php)(s)?(:(/|%2f|%u2215)(/|%2f|%u2215)) 12;
			"~*(globals|mosconfig([a-z_]{1,22})|request)(=|\[|%[a-z0-9]{0,2})" 13;
			~*((boot|win)((\.|%2e)ini)|etc(/|%2f)passwd|self(/|%2f)environ) 14;
			"~*(((/|%2f){3,3})|((\.|%2e){3,3})|((\.|%2e){2,2})(/|%2f|%u2215))" 15;
			~*(benchmark|char|exec|fopen|function|html)(.*)(\(|%28)(.*)(\)|%29) 16;
			"~*(php)([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})" 19;
			~*(e|%65|%45)(v|%76|%56)(a|%61|%31)(l|%6c|%4c)(.*)(\(|%28)(.*)(\)|%29) 20;
			~*(/|%2f)(=|%3d|$&|_mm|cgi(\.|-)|inurl(:|%3a)(/|%2f)|(mod|path)(=|%3d)(\.|%2e)) 21;
			~*(<|%3c)(.*)(e|%65|%45)(m|%6d|%4d)(b|%62|%42)(e|%65|%45)(d|%64|%44)(.*)(>|%3e) 22;
			~*(<|%3c)(.*)(i|%69|%49)(f|%66|%46)(r|%72|%52)(a|%61|%41)(m|%6d|%4d)(e|%65|%45)(.*)(>|%3e) 23;
			~*(<|%3c)(.*)(o|%4f|%6f)(b|%62|%42)(j|%4a|%6a)(e|%65|%45)(c|%63|%43)(t|%74|%54)(.*)(>|%3e) 24;
			~*(<|%3c)(.*)(s|%73|%53)(c|%63|%43)(r|%72|%52)(i|%69|%49)(p|%70|%50)(t|%74|%54)(.*)(>|%3e) 25;
			~*(\+|%2b|%20)(d|%64|%44)(e|%65|%45)(l|%6c|%4c)(e|%65|%45)(t|%74|%54)(e|%65|%45)(\+|%2b|%20) 26;
			~*(\+|%2b|%20)(i|%69|%49)(n|%6e|%4e)(s|%73|%53)(e|%65|%45)(r|%72|%52)(t|%74|%54)(\+|%2b|%20) 27;
			~*(\+|%2b|%20)(s|%73|%53)(e|%65|%45)(l|%6c|%4c)(e|%65|%45)(c|%63|%43)(t|%74|%54)(\+|%2b|%20) 28;
			~*(\+|%2b|%20)(u|%75|%55)(p|%70|%50)(d|%64|%44)(a|%61|%41)(t|%74|%54)(e|%65|%45)(\+|%2b|%20) 29;
			~*(\\x00|(\"|%22|\'|%27)?0(\"|%22|\'|%27)?(=|%3d)(\"|%22|\'|%27)?0|cast(\(|%28)0x|or%201(=|%3d)1) 30;
			"~*(g|%67|%47)(l|%6c|%4c)(o|%6f|%4f)(b|%62|%42)(a|%61|%41)(l|%6c|%4c)(s|%73|%53)(=|[|%[0-9A-Z]{0,2})" 31;
			"~*(_|%5f)(r|%72|%52)(e|%65|%45)(q|%71|%51)(u|%75|%55)(e|%65|%45)(s|%73|%53)(t|%74|%54)(=|[|%[0-9A-Z]{0,2})" 32;
			"~*(j|%6a|%4a)(a|%61|%41)(v|%76|%56)(a|%61|%31)(s|%73|%53)(c|%63|%43)(r|%72|%52)(i|%69|%49)(p|%70|%50)(t|%74|%54)(:|%3a)(.*)(;|%3b|\)|%29)" 33;
			~*(b|%62|%42)(a|%61|%41)(s|%73|%53)(e|%65|%45)(6|%36)(4|%34)(_|%5f)(e|%65|%45|d|%64|%44)(e|%65|%45|n|%6e|%4e)(c|%63|%43)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(.*)(\()(.*)(\)) 34;
			"~*(allow_url_(fopen|include)|auto_prepend_file|blexbot|browsersploit|(c99|php)shell|curltest|disable_functions?|document_root|elastix|encodeuricom|exec|exploit|fclose|fgets|fputs|fsbuff|fsockopen|gethostbyname|grablogin|hmei7|input_file|load_file|null|open_basedir|outfile|passthru|popen|proc_open|quickbrute|remoteview|root_path|safe_mode|shell_exec|site((.){0,2})copier|sux0r|trojan|wget|xertive)" 35;
			"~*(;|<|>|\'|\"|\)|%0a|%0d|%22|%27|%3c|%3e|%00)(.*)(/\*|alter|base64|benchmark|cast|char|concat|convert|create|encode|declare|delete|drop|insert|md5|order|request|script|select|set|union|update)" 36;
			~*((\+|%2b)(concat|delete|get|select|union)(\+|%2b)) 37;
			~*(union)(.*)(select)(.*)(\(|%28) 38;
			~*(concat)(.*)(\(|%28) 39;
			
		}

		map $request_uri $bad_request_7g {
			
			default 0;
			"~*([a-z0-9]{2000})" 1;
			~*((=?\\\(\'|%27)/?)(\.)) 2;
			"~*(/)(\*|\"|\'|\.|,|&amp;|&amp;amp;?)/?$" 3;
			~*(\.)(php)(\()?([0-9]+)(\))?(/)?$ 4;
			~*(/)(vbulletin|boards|vbforum)(/)? 5;
			~*(\^|~|`|<|>|\\|\{|\}|\[|\]|\|) 6;
			~*(\.(s?ftp-?)config|(s?ftp-?)config\.) 7;
			~*(\{0\}|\"?0\"?=\"?0|\(/\(|\.\.\.|\+\+\+|\\\") 8;
			~*(thumbs?(_editor|open)?|tim(thumbs?)?)(\.php) 9;
			~*(/)(fck|ckfinder|fullclick|ckfinder|fckeditor) 10;
			~*(\.|20)(get|the)(_)(permalink|posts_page_url)(\() 11;
			~*(///|\?\?|/&&|/\*(.*)\*/|/:/|\\\\|0x00|%00|%0d%0a) 12;
			~*(/%7e)(root|ftp|bin|nobody|named|guest|logs|sshd)(/) 13;
			~*(/)(etc|var)(/)(hidden|secret|shadow|ninja|passwd|tmp)(/)?$ 14;
			~*(s)?(ftp|http|inurl|php)(s)?(:(/|%2f|%u2215)(/|%2f|%u2215)) 15;
			"~*(/)(=|\$&?|&?(pws|rk)=0|_mm|_vti_|cgi(\.|-)?|(=|/|;|,)nt\.)" 16;
			~*(\.)(conf(ig)?|ds_store|htaccess|htpasswd|init?|mysql-select-db)(/)?$ 19;
			~*(/)(bin)(/)(cc|chmod|chsh|cpp|echo|id|kill|mail|nasm|perl|ping|ps|python|tclsh)(/)?$ 20;
			~*(/)(::[0-9999]|%3a%3a[0-9999]|127\.0\.0\.1|localhost|loopback|makefile|pingserver|wwwroot)(/)? 21;
			~*(\(null\)|\{\$itemURL\}|cAsT\(0x|echo(.*)kae|etc/passwd|eval\(|self/environ|\+union\+all\+select) 22;
			"~*(/)(awstats|(c99|php|web)shell|document_root|error_log|listinfo|muieblack|remoteview|site((.){0,2})copier|sqlpatch|sux0r)" 23;
			~*(/)((php|web)?shell|conf(ig)?|crossdomain|fileditor|locus7|nstview|php(get|remoteview|writer)|r57|remview|sshphp|storm7|webadmin)(.*)(\.|\() 24;
			~*(/)(author-panel|bitrix|class|database|(db|mysql)-?admin|filemanager|htdocs|httpdocs|https?|mailman|mailto|msoffice|mysql|_?php-?my-?admin(.*)|sql|system|tmp|undefined|usage|var|vhosts|webmaster|www)(/) 25;
			~*(base64_(en|de)code|benchmark|child_terminate|e?chr|eval|exec|function|fwrite|(f|p)open|html|leak|passthru|p?fsockopen|phpinfo|posix_(kill|mkfifo|setpgid|setsid|setuid)|proc_(close|get_status|nice|open|terminate)|(shell_)?exec|system)(.*)(\()(.*)(\)) 26;
			~*(\.)(7z|ab4|afm|aspx?|bash|ba?k?|bz2|cfg|cfml?|cgi|conf(ig)?|ctl|dat|db|dll|eml|et2|exe|fec|fla|hg|inc|ini|inv|jsp|log|lqd|mbf|mdb|mmw|mny|old|one|out|passwd|pdb|pl|psd|pst|ptdb|pwd|py|qbb|qdf|rar|rdf|sdb|sql|sh|soa|swf|swl|swp|stx|tar|tax|tgz|tls|tmd|wow|zlib)$ 27;
			~*(/)(^$|00.temp00|0day|3xp|70bex?|admin_events|bkht|(php|web)?shell|configbak|curltest|db|dompdf|filenetworks|hmei7|index\.php/index\.php/index|jahat|kcrew|keywordspy|mobiquo|mysql|nessus|php-?info|racrew|sql|ucp|webconfig|(wp-)?conf(ig)?(uration)?|xertive)(\.php) 28;
			
		}

		map $request_method $not_allowed_method_7g {
			
			default 0;
			~*^(connect) 1;
			~*^(debug) 2;
			~*^(delete) 3;
			~*^(move) 4;
			~*^(patch) 5;
			~*^(put) 6;
			~*^(trace) 7;
			~*^(track) 8;
			
		}
		EOF



		echo "$(date): Installing common nginx entries..."
		# create /etc/nginx/common/cache_enabler.conf which contains needed configuration for the Cache Enabler plugin
		cat >> /etc/nginx/common/cache_enabler.conf <<-'EOF'
		# This file defines variables needed for the Cache Enabler WordPress plugin by KeyCDN
		# It just defines variables and doesn't do much by iteslf.
		# It's meant to be included in the site configuration

		set $cache_uri $request_uri;

		# bypass cache if POST requests or URLs with a query string
		if ($request_method = POST) {
			set $cache_uri 'nullcache';
		}
		if ($query_string != "") {
			set $cache_uri 'nullcache';
		}

		# bypass cache if URLs containing the following strings
		if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|/feed/|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(index)?.xml|[a-z0-9-]+-sitemap([0-9]+)?.xml)") {
			set $cache_uri 'nullcache';
		}

		# bypass cache if the cookies containing the following strings
		if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_logged_in") {
			set $cache_uri 'nullcache';
		}

		# custom sub directory e.g. /blog
		set $custom_subdir '';

		# default html files
		# two variables with and without a slash need to be defined to satisfy following situations:
		# https://myblog.com/hello-world
		# https://myblog.com/hello-world/
		set $cache_enabler_uri '${custom_subdir}/wp-content/cache/cache-enabler/${http_host}${cache_uri}index.html';
		set $cache_enabler_uri2 '${custom_subdir}/wp-content/cache/cache-enabler/${http_host}${cache_uri}/index.html';

		# webp html files
		# two variables with and without a slash need to be defined to satisfy following situations:
		# https://myblog.com/hello-world
		# https://myblog.com/hello-world/
		if ($http_accept ~* "image/webp") {
			set $cache_enabler_uri '${custom_subdir}/wp-content/cache/cache-enabler/${http_host}${cache_uri}index-webp.html';
			set $cache_enabler_uri2 '${custom_subdir}/wp-content/cache/cache-enabler/${http_host}${cache_uri}/index-webp.html';
		}
		EOF

		# create /etc/nginx/common/gzip.conf which contains needed configuration to enable gzip for certain file types
		cat >> /etc/nginx/common/gzip.conf <<-'EOF'
		##
			# Gzip Settings
			##

			gzip on;
			
			gzip_disable "msie6";

			gzip_vary on;
			gzip_static on;
			gzip_proxied expired no-cache no-store private auth;
			gzip_comp_level 6;
			gzip_buffers 32 16k;
			gzip_http_version 1.1;
			gzip_min_length 10240;
			
			gzip_types
			application/atom+xml
			application/geo+json
			application/javascript
			application/json
			application/ld+json
			application/manifest+json
			application/rdf+xml
			application/rss+xml
			application/vnd.ms-fontobject
			application/wasm
			application/x-font-opentype
			application/x-font-truetype
			application/x-font-ttf
			application/x-javascript
			application/x-web-app-manifest+json
			application/xhtml+xml
			application/xml
			application/xml+rss
			font/eot
			font/opentype
			font/otf
			image/bmp
			image/svg+xml
			image/vnd.microsoft.icon
			image/x-icon
			image/x-win-bitmap
			text/cache-manifest
			text/calendar
			text/css
			text/javascript
			text/markdown
			text/plain
			text/vcard
			text/vnd.rim.location.xloc
			text/vtt
			text/x-component
			text/x-cross-domain-policy
			text/xml;
		EOF

		# create /etc/nginx/common/browsercache.conf which contains items that should be cached by the browser
		cat >> /etc/nginx/common/browsercache.conf <<-'EOF'

		# Graphics files should be cached by the browser for long periods of time
		location ~* \.(?:ogg|ogv|svg|svgz|eot|otf|woff|woff2|ttf|jpg|jpeg|gif|png|ico|bmp|swf)$ {

			add_header Cache-Control "public, max-age=30000000, stale-while-revalidate=7, stale-if-error=7";
			access_log off;
			log_not_found off;
			expires 300d;
			
		}

		# CSS and JS files should be cached by the browser for short periods of time
		location ~* \.(?:css|js|less|scss)$ {

			add_header Cache-Control "public, max-age=600000, stale-while-revalidate=7, stale-if-error=7";
			access_log off;
			log_not_found off;
			expires 7d;
			
		}

		EOF
		
		cat >> /etc/nginx/common/deny.conf <<-EOL
		# block access to hidden files/dirs (except .well-known)
		location ~ /\.(?!well-known) {
			deny all;
		}

		# do not allow running of any other cgi scripts
		location ~* .(pl|cgi|py|sh|lua)$ {
			return 444;
		}

		# block download of .log and .sql files
		location ~\.(log|sql)$ {
			deny all;
		}

		# block access to wp-content/updraft
		location ~ /(wp-content/updraft) {
		deny all;
		}

		# deny access to .php files in the uploads directory
		location ~* /(?:uploads|files)/.*\.php\$ {
		deny all;
		}

		# hide nginx version
		server_tokens off;

		# hide X-Powered-By header
		fastcgi_hide_header X-Powered-By;
		EOL
	fi
	
	#checkpoint to indicate we have done this block...
	touch "$CHKPOINT_FOLDER/checkpoint150-end.txt"	
fi #checkpoint150.txt
##################### End very large block, checkpoint150 ###############

# Running a specific update (This fixes an issue with WP-CLI that popped up around Nov 20th 2021 - some weird compilation message.)
# @see: https://bugs.php.net/bug.php?id=81640
echo "$(date): Updating libpcre-2-8-0..."
apt-get install -y libpcre2-8-0 > /dev/null 2>&1

# Getting WPCLI Packages
echo "Getting and installing WPCLI packages..."
wget -O /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar > /dev/null 2>&1
chmod +x /usr/local/bin/wp > /dev/null 2>&1 
touch /etc/profile.d/add_user_local_bin.sh > /dev/null 2>&1 
echo 'PATH=$PATH:/usr/local/bin' >> /etc/profile.d/add_user_local_bin.sh > /dev/null 2>&1
wp cli update --yes  > /dev/null 2>&1


# if aws cli is not present, install it
if ! hash aws2 2>/dev/null; then
	echo "$(date): Getting and installing AWS CLI..."
    wget "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip"  > /dev/null 2>&1
    unzip awscli-exe-linux-x86_64.zip  > /dev/null 2>&1
    ./aws/install  > /dev/null 2>&1
    rm -rf aws awscli-exe-linux-x86_64.zip  > /dev/null 2>&1
fi

# ufw
echo "$(date): Configuring firewall..."
apt-get install ufw -y > /dev/null 2>&1
ssh_port=$(grep 'Port ' /etc/ssh/sshd_config | head -n 1 | cut -d " " -f 2)
ufw default deny incoming > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup default incoming firewall rules! This is not a fatal error but you should double-check your rules after this process is completed."
fi
ufw default allow outgoing > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup default outgoing firewall rules! This is not a fatal error but you should double-check your rules after this process is completed."
fi
ufw allow $ssh_port > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup ssh port on firewall! This is not a fatal error but you should double-check your rules after this process is completed."
fi
ufw allow 80 > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup http port on firewall! This is not a fatal error but you should double-check your rules after this process is completed."
fi
ufw allow 443 > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to setup https port on firewall! This is not a fatal error but you should double-check your rules after this process is completed."
fi

if [ "$webserver_type" = "ols" ]  || [ "$webserver_type" = "ols-enterprise" ]; then
    echo $webserver_type evaluated as true
    ufw allow 7080 > /dev/null 2>&1
    if [ $? -ne 0 ] 
    then
	    echo "Unable to setup OLS/LSWS admin port on firewall! This is not a fatal error but you should double-check your rules after this process is completed."
    fi
fi

ufw --force enable > /dev/null 2>&1
if [ $? -ne 0 ] 
then
	echo "Unable to activate firewall! This is not a fatal error but you should investigate this after this server process is complete."
fi

# Install_CSF # disabled but left here in case anyone finds it useful.
raise_file_limits  # This is needed or you get weird errors with mysql openlitespeed with too many open files with caching stuff and plugins.

# pointer needed for the wp-sync script
echo "### do not edit from here ###" >> /etc/ssh/sshd_config

if [ "$webserver_type" = "nginx" ]; then
    # restart nginx
	systemctl enable nginx
	systemctl restart nginx
elif [ "$webserver_type" = "ols" ]  || [ "$webserver_type" = "ols-enterprise" ]; then
    # restart ols/ols-enterprise
	killall -9 lsphp >/dev/null 2>&1
	systemctl stop lsws >/dev/null 2>&1
	systemctl start lsws >/dev/null 2>&1
fi



echo
echo "$(date): Installation completed!"
echo

